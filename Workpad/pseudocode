TopDownMerge(...) {
    i = iBegin,  1
    j = iMiddle, 2
    k = iBegin 3

[2, 1]  -- for [3, 2, 1] we need to run the merge sort 2 times
    while k < iEnd {
        if (i < iMiddle && (j >= iEnd || A[i] <= A[j])) {
            B[k] = A[i];
            i += 1;
        } else {
            B[k] = A[j]
            j += 1;
        }
       k += 1;
    }
}


[3, 2, 1]
i = 1  |1
while i < length(A)  |2 11 23
    x = A[i]  |3 12 // x = 2 // x = 1
    j = i - 1  |4 13 // j = 0 // j = 1
    while j >= 0 and A[j] > x |5 8 14 17 20
        A[j + 1] = A[j] |6 15 18 // A[1] = 3 // A[2] = 3 // A[1] = 2
        j -= 1  |7 16 19
    A[j+1] = x  |9 21 // A[0] = 2 // A[0] = 1
    i += 1  |10 22

total lines 23







